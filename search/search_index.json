{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"QueryFlow \u00b6 QueryFlow, is a query visualization tool that provides insights into common problems in your SQL query. QueryFlow visualizes the query execution using the Sankey diagram, a technique that allows one to illustrate complex processes, with a focus on a single aspect or resource that you want to highlight. This allow to tackle the following problems: Identifying missing records. Identifying Ineffective operations. Identifying duplications in a query. Comparing optimizer planned metrics to actual metrics. Identifying performance bottlenecks in a single query. Identifying performance bottlenecks in multiple queries. Currently QueryFlow support the following databases/data-engines: * Athena * PostgreSQL Documentation: https://eyaltrabelsi.github.io/query-flow GitHub: https://github.com/eyaltrabelsi/query-flow PyPI: https://pypi.org/project/query-flow/ Free software: MIT Installing \u00b6 The best way to install query-flow is: $ pip install query-flow In case you want to use another way go to the installation page.","title":"Home"},{"location":"#queryflow","text":"QueryFlow, is a query visualization tool that provides insights into common problems in your SQL query. QueryFlow visualizes the query execution using the Sankey diagram, a technique that allows one to illustrate complex processes, with a focus on a single aspect or resource that you want to highlight. This allow to tackle the following problems: Identifying missing records. Identifying Ineffective operations. Identifying duplications in a query. Comparing optimizer planned metrics to actual metrics. Identifying performance bottlenecks in a single query. Identifying performance bottlenecks in multiple queries. Currently QueryFlow support the following databases/data-engines: * Athena * PostgreSQL Documentation: https://eyaltrabelsi.github.io/query-flow GitHub: https://github.com/eyaltrabelsi/query-flow PyPI: https://pypi.org/project/query-flow/ Free software: MIT","title":"QueryFlow"},{"location":"#installing","text":"The best way to install query-flow is: $ pip install query-flow In case you want to use another way go to the installation page.","title":"Installing"},{"location":"changelog/","text":"Changelog \u00b6 0.1.0 (2022-06-07) \u00b6 * 0.1.0 (2022-06-05) \u00b6 First release on PyPI.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#010-2022-06-07","text":"*","title":"0.1.0 (2022-06-07)"},{"location":"changelog/#010-2022-06-05","text":"First release on PyPI.","title":"0.1.0 (2022-06-05)"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/eyaltrabelsi/query-flow/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 query-flow could always use more documentation, whether as part of the official query-flow docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/eyaltrabelsi/query-flow/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up query-flow for local development. Fork the query-flow repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/query-flow.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/eyaltrabelsi/query-flow/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_query_flow.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/eyaltrabelsi/query-flow/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"query-flow could always use more documentation, whether as part of the official query-flow docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/eyaltrabelsi/query-flow/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up query-flow for local development. Fork the query-flow repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/query-flow.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/eyaltrabelsi/query-flow/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_query_flow.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install query-flow, run this command in your terminal: $ pip install query-flow This is the preferred method to install query-flow, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for query-flow can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/eyaltrabelsi/query-flow Or download the tarball : $ curl -OJL https://github.com/eyaltrabelsi/query-flow/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install query-flow, run this command in your terminal: $ pip install query-flow This is the preferred method to install query-flow, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for query-flow can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/eyaltrabelsi/query-flow Or download the tarball : $ curl -OJL https://github.com/eyaltrabelsi/query-flow/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use query-flow in a project import query_flow","title":"Usage"},{"location":"usage/#usage","text":"To use query-flow in a project import query_flow","title":"Usage"}]}